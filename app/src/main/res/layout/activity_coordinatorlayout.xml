<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2017 (C) CodePlay Studio. All rights reserved.
  ~
  ~ All source code within this app is licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License. You may obtain a copy of the
  ~ License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the
  ~ License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
  ~ either express or implied. See the License for the specific language governing permissions
  ~ and limitations under the License.
  -->

<!-- Need to use a Theme.AppCompat theme (or descendant) with Android Support:Design library -->
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <!--
    AppBarLayout depends heavily on being used as a direct child within a CoordinatorLayout.
    If you use AppBarLayout within a different ViewGroup, most of it's functionality will not work.

    It also requires a separate scrolling sibling in order to know when to scroll, the binding is done
    through the AppBarLayout.ScrollingViewBehavior behavior class.

    Children should provide their desired scrolling behavior through app:layout_scrollFlags or
    setScrollFlags(int):

    SCROLL_FLAG_SCROLL: The view will be scroll in direct relation to scroll events. Without it specified,
                        the view will remain static allowing the scrollable content slide behind it.

    SCROLL_FLAG_SNAP  : Upon scrolling ending, if the view is only partially visible then it will be snapped
                        and scrolled to it's closest edge, avoid falling into mid-animation-states, that is
                        the animation will always hide or expand all the height of its view.

    SCROLL_FLAG_ENTER_ALWAYS: This flag ensures that any downward scroll will cause the view to become
                              visible, enabling the 'quick return' pattern.

    SCROLL_FLAG_ENTER_ALWAYS_COLLAPSED: An additional flag for 'enterAlways' which modifies the returning
                                        view to only initially scroll back to it's collapsed height. That is
                                        when the view has declared a minHeight and using this flag, the view
                                        will only enter at its minimum height, only re-expanding to its full
                                        height when the scrolling view has reached it's top.

    SCROLL_FLAG_EXIT_UNTIL_COLLAPSED  : When exiting (scrolling off screen), the view will be scrolled
                                        until it is 'collapsed' (its minHeight).

    The latter four flags, snap, enterAlways, enterAlwaysCollapsed and exitUntiCollapsed must combine
    with scroll flag, when set alone with any one of these flags, the bahaviour is just same as when
    no flag is set.
     -->
    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appbar"
        android:layout_width="match_parent"
        android:layout_height="225dp"
        android:theme="@style/ThemeOverlay.AppCompat.Light"
        android:fitsSystemWindows="false">

        <com.google.android.material.appbar.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            app:contentScrim="?attr/colorPrimary"
            app:expandedTitleMarginStart="48dp"
            app:expandedTitleMarginEnd="64dp"
            app:layout_scrollFlags="scroll|exitUntilCollapsed"
            android:fitsSystemWindows="false">

            <ImageView
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                android:src="@drawable/banner_android_2"
                app:layout_collapseMode="parallax"
                android:fitsSystemWindows="true"/>

            <androidx.appcompat.widget.Toolbar
                android:layout_width="match_parent"
                android:layout_height="?attr/actionBarSize"
                app:layout_collapseMode="pin"/>

        </com.google.android.material.appbar.CollapsingToolbarLayout>

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:lineSpacingExtra="@dimen/view_margin_small"
            android:paddingBottom="@dimen/activity_vertical_margin"
            android:paddingEnd="@dimen/activity_horizontal_margin"
            android:paddingStart="@dimen/activity_horizontal_margin"
            android:paddingTop="@dimen/activity_vertical_margin"
            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
            android:text="@string/coordinator_article"/>

    </androidx.core.widget.NestedScrollView>

    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginEnd="@dimen/activity_horizontal_margin"
        android:src="@drawable/ic_share_black_64dp"
        android:tint="@android:color/white"
        app:layout_anchor="@id/appbar"
        app:layout_anchorGravity="bottom|right|end"
        app:backgroundTint="@color/colorPrimaryDark"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>